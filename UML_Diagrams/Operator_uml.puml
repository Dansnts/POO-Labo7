@startuml
skinparam linetype ortho
package "Operators"{
  abstract class Operator {
    {abstract} void execute()
    {abstract} double compute(double operand1, double operand2)
  }

  class Digit extends Operator {
    - int digit
    + Digit(int digit)
    + void execute()
  }

  class BackSpace extends Operator {
    + void execute()
  }

  class ClearError extends Operator {
    + void execute()
  }

  class Clear extends Operator {
    + void execute()
  }

  class MemoryRecall extends Operator {
    + void execute()
  }

  class MemoryStore extends Operator {
    + void execute()
  }

  class ChangeSign extends Operator {
    + void execute()
  }

  class AppendDot extends Operator {
    + void execute()
  }

  class Reciprocal extends Operator {
    + void execute()
  }

  class Square extends Operator {
    + void execute()
  }

  class SquareRoot extends Operator {
    + void execute()
  }

  abstract class BinaryOperation extends Operator {
    + void execute()
    {abstract} double compute(double operand1, double operand2)
  }

  class Addition extends BinaryOperation {
    + double compute(double operand1, double operand2)
  }

  class Subtraction extends BinaryOperation {
    + double compute(double operand1, double operand2)
  }

  class Multiplication extends BinaryOperation {
    + double compute(double operand1, double operand2)
  }

  class Division extends BinaryOperation {
    + double compute(double operand1, double operand2)
  }

  class Enter extends Operator {
    + void execute()
  }

  Operator <|-- Digit
  Operator <|-- BackSpace
  Operator <|-- ClearError
  Operator <|-- Clear
  Operator <|-- MemoryRecall
  Operator <|-- MemoryStore
  Operator <|-- ChangeSign
  Operator <|-- AppendDot
  Operator <|-- Reciprocal
  Operator <|-- Square
  Operator <|-- SquareRoot
  Operator <|-- BinaryOperation
  Operator <|-- Enter

  BinaryOperation <|-- Addition
  BinaryOperation <|-- Subtraction
  BinaryOperation <|-- Multiplication
  BinaryOperation <|-- Division
}
@enduml
