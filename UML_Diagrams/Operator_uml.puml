@startuml
skinparam linetype polyline
skinparam groupInheritance 2
left to right direction
package "Operators" {
  abstract class Operator {
    {abstract} void execute()
    + void executeBinaryOperation(double operand1, double operand2, State state, BinaryOperation operation)
    + double compute(double operand1, double operand2) : double
  }

  class BackSpace extends Operator {
    + void execute()
  }

  class ClearError extends Operator {
    + void execute()
  }

  class Clear extends Operator {
    + void execute()
  }

  class MemoryRecall extends Operator {
    + void execute()
  }

  class MemoryStore extends Operator {
    + void execute()
  }

  class Digit extends Operator {
    - int digit
    + Digit(int digit)
    + void execute()
  }

  abstract class UnaryOperation extends Operator {
    + UnaryOperation(UnaryFunction operation)
    + void execute()
  }

  class ChangeSign extends Operator {
    + void execute()
  }

  class AppendDot extends Operator {
    + void execute()
  }

  class Reciprocal extends UnaryOperation {
    + Reciprocal()
  }

  class Square extends UnaryOperation {
    + Square()
  }

  class SquareRoot extends UnaryOperation {
    + SquareRoot()
  }

  abstract class BinaryOperation extends Operator {
    + void execute()
    {abstract} double compute(double operand1, double operand2) : double
  }

  class Addition extends BinaryOperation {
    + double compute(double operand1, double operand2) : double
  }

  class Subtraction extends BinaryOperation {
    + double compute(double operand1, double operand2) : double
  }

  class Multiplication extends BinaryOperation {
    + double compute(double operand1, double operand2) : double
  }

  class Division extends BinaryOperation {
    + double compute(double operand1, double operand2) : double
  }

  class Enter extends Operator {
    + void execute()
  }

}
@enduml
